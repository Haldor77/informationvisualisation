Traceback (most recent call last):
  File "C:\Users\haldo\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\haldo\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\haldo\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\haldo\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\haldo\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\haldo\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\haldo\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\haldo\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.graph_objects as go
import numpy as np

# 1) Data inladen en voorbereiden
co2 = pd.read_csv('owid-co2-data.csv', usecols=['country','year','co2_per_capita'])
hale = pd.read_csv('C64284D_ALL_LATEST.csv')

# Harmoniseren landnaam
co2['country'] = co2['country'].replace({'United States':'United States of America'})

# Filter Healthy life expectancy
hale = (
    hale.loc[
        (hale['IND_NAME']=='Healthy life expectancy (at birth)') &
        (hale['DIM_SEX']=='TOTAL'),
        ['GEO_NAME_SHORT','DIM_TIME','AMOUNT_N']
    ]
    .rename(columns={
        'GEO_NAME_SHORT':'country',
        'DIM_TIME':'year',
        'AMOUNT_N':'healthy_life_expectancy'
    })
)

# Jaar als int, merge en filter voor 2019 + geselecteerde landen
co2['year'] = co2['year'].astype(int)
hale['year'] = hale['year'].astype(int)
merged = pd.merge(co2, hale, on=['country','year'], how='inner')

countries = [
    'United States of America',
    'France',
    'India'
]

df2019 = (
    merged
    .query("year == 2019 and country in @countries")
    .set_index('country')
    .loc[countries]
    .reset_index()
)

# 2) X-waarden en barbreedte
x = np.arange(len(countries))
width = 0.4

# 3) Bouw de interactieve figuur
fig = go.Figure()

# COâ‚‚ per Capita (linker y-as)
fig.add_trace(go.Bar(
    x=x - width/2,
    y=df2019['co2_per_capita'],
    name='COâ‚‚ per Capita (tons)',
    marker_color='orange',
    yaxis='y1',
    hovertemplate='COâ‚‚: %{y} ton<extra></extra>'
))

# Healthy Life Expectancy (rechter y-as)
fig.add_trace(go.Bar(
    x=x + width/2,
    y=df2019['healthy_life_expectancy'],
    name='Healthy Life Expectancy (years)',
    marker_color='blue',
    yaxis='y2',
    hovertemplate='Gezonde levensverwachting: %{y} jaar<extra></extra>'
))

# 4) Layout met dubbele y-as en styling gelijk aan matplotlib
fig.update_layout(
    title="Emissions vs Healthy Life Expectancy: U.S. vs France vs India (2019)",
    xaxis=dict(
        tickmode='array',
        tickvals=x,
        ticktext=countries,
        tickangle=15,
        title='Country'
    ),
    yaxis=dict(
        title='COâ‚‚ per Capita (tons)',
        titlefont=dict(color='orange'),
        tickfont=dict(color='orange')
    ),
    yaxis2=dict(
        title='Healthy Life Expectancy (years)',
        titlefont=dict(color='blue'),
        tickfont=dict(color='blue'),
        overlaying='y',
        side='right'
    ),
    legend=dict(
        orientation='h',
        yanchor='bottom',
        y=1.02,
        x=0.5,
        xanchor='center'
    ),
    bargap=0.2,
    margin=dict(t=80, b=50, l=60, r=60)
)

# 5) Toon interactieve grafiek
fig.show()

# Optioneel: exporteer naar standalone HTML
# fig.write_html("emissions_health_2019.html", include_plotlyjs='cdn')


------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 2[39m
[32m      1[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpd[39;00m
[32m----> [39m[32m2[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01mgraph_objects[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mgo[39;00m
[32m      3[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mnp[39;00m
[32m      5[39m [38;5;66;03m# 1) Data inladen en voorbereiden[39;00m

[31mModuleNotFoundError[39m: No module named 'plotly'

